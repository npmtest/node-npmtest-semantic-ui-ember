{"/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/test.js":"/* istanbul instrument in package npmtest_semantic_ui_ember */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/lib.npmtest_semantic_ui_ember.js":"/* istanbul instrument in package npmtest_semantic_ui_ember */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_semantic_ui_ember = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_semantic_ui_ember = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-semantic-ui-ember && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_semantic_ui_ember */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_semantic_ui_ember\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_semantic_ui_ember.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_semantic_ui_ember.rollup.js'] =\n            local.assetsDict['/assets.npmtest_semantic_ui_ember.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_semantic_ui_ember.__dirname + '/lib.npmtest_semantic_ui_ember.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/index.js":"/* jshint node: true */\n'use strict';\n\nvar path = require('path');\n\nvar defaults = {\n  import: {\n    css: true,\n    javascript: true,\n    images: true,\n    fonts: true\n  },\n  source: {\n    css: 'bower_components/semantic-ui/dist',\n    javascript: 'bower_components/semantic-ui/dist',\n    images: 'bower_components/semantic-ui/dist/themes/default/assets/images',\n    fonts: 'bower_components/semantic-ui/dist/themes/default/assets/fonts'\n  },\n  destination: {\n    images: 'assets/themes/default/assets/images',\n    fonts: 'assets/themes/default/assets/fonts'\n  }\n};\n\nvar getDefault = require('./lib/utils/get-default');\n\nmodule.exports = {\n  name: 'semantic-ui-ember',\n\n  included: function (app) {\n    var options = (app && app.project.config(app.env)['SemanticUI']) || {};\n\n    var importCss = getDefault('import', 'css', [options, defaults]);\n    if (importCss) {\n      var sourceCss = getDefault('source', 'css', [options, defaults]);\n      app.import({\n        development: path.join(sourceCss, 'semantic.css'),\n        production: path.join(sourceCss, 'semantic.min.css')\n      });\n    }\n\n    var importJavascript = getDefault('import', 'javascript', [options, defaults]);\n    if (importJavascript) {\n      var sourceJavascript = getDefault('source', 'javascript', [options, defaults]);\n      app.import({\n        development: path.join(sourceJavascript, 'semantic.js'),\n        production: path.join(sourceJavascript, 'semantic.min.js')\n      });\n    }\n\n    var importImages = getDefault('import', 'images', [options, defaults]);\n    if (importImages) {\n      var sourceImage = getDefault('source', 'images', [options, defaults]);\n      var imageOptions = { destDir: getDefault('destination', 'images', [options, defaults]) };\n      app.import(path.join(sourceImage, 'flags.png'), imageOptions);\n    }\n\n    var importFonts = getDefault('import', 'fonts', [options, defaults]);\n    if (importFonts) {\n      var fontExtensions = ['.eot','.otf','.svg','.ttf','.woff','.woff2'];\n      var sourceFont = getDefault('source', 'fonts', [options, defaults]);\n      var fontOptions = { destDir: getDefault('destination', 'fonts', [options, defaults]) };\n      for (var i = fontExtensions.length - 1; i >= 0; i--) {\n        app.import(path.join(sourceFont, 'icons' + fontExtensions[i]), fontOptions);\n      }\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/lib/utils/get-default.js":"module.exports = function(path, property, options) {\n  for (var i = 0; i < options.length; i++) {\n    var option = options[i];\n    if (option == null || typeof option !== \"object\") {\n      continue;\n    }\n\n    if (option.hasOwnProperty(path)) {\n      if (typeof option[path] === \"object\") {\n        if (option[path].hasOwnProperty(property)) {\n          return option[path][property];\n        }\n      } else {\n        return option[path];\n      }\n    }\n\n    if (option.hasOwnProperty(property)) {\n      return option[property];\n    }\n  }\n};","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/addon/semantic.js":"import Ember from 'ember';\n\nvar Semantic = Ember.Namespace.create({\n  UI_DEBUG: false,\n  UI_PERFORMANCE: false,\n  UI_VERBOSE: false\n});\n\nexport default Semantic;\n","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/config/release.js":"/* jshint node:true */\n\nvar runCommand = require('ember-addon-genie/lib/utils/run-command');\n\nmodule.exports = {\n  init: function() {\n    this._previousVersion = require('../package.json').version;\n  },\n\n  afterPublish: function(project, versions) {\n    runCommand('ember github-pages:commit --message \"Released ' + versions.next + '\"', true);\n    runCommand('git push origin gh-pages:gh-pages', true);\n  },\n  publish: true\n};\n","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/addon/components/ui-accordion.js":"import Ember from 'ember';\nimport Base from '../mixins/base';\n\nexport default Ember.Component.extend(Base, {\n  module: 'accordion',\n  classNames: ['ui', 'accordion']\n});","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/addon/components/ui-checkbox.js":"import Ember from 'ember';\nimport Checkbox from '../mixins/checkbox';\n\nexport default Ember.Component.extend(Checkbox, {\n  type: 'checkbox',\n  ignorableAttrs: ['checked', 'label', 'disabled'],\n\n  // Internal wrapper for onchange, to pass through checked\n  _onChange() {\n    let checked = this.execute('is checked');\n    return this.attrs.onChange(checked, this);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/addon/components/ui-dimmer.js":"import Ember from 'ember';\nimport Base from '../mixins/base';\n\nexport default Ember.Component.extend(Base, {\n  module: 'dimmer'\n});\n","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/addon/components/ui-dropdown.js":"import Ember from 'ember';\nimport Base from '../mixins/base';\nimport PromiseResolver from 'ember-promise-tools/mixins/promise-resolver';\n\nconst _proxyCallback = function(callbackName) {\n  return function(value, text, $element) {\n    return this.get(`attrs.${callbackName}`)(this._getObjectOrValue(value), text, $element, this);\n  };\n};\n\nexport default Ember.Component.extend(Base, PromiseResolver, {\n  module: 'dropdown',\n  classNames: ['ui', 'dropdown'],\n  ignorableAttrs: ['selected'],\n  objectMap: null,\n\n  init() {\n    this._super(...arguments);\n    this.set('objectMap', {});\n  },\n\n  willDestroyElement() {\n    this._super(...arguments);\n    this.set('objectMap', null);\n  },\n\n  // Semantic Hooks\n  willInitSemantic(settings) {\n    this._super(...arguments);\n    if (settings.onChange) {\n      settings.onChange = this.get('_onChange');\n    }\n    if (settings.onAdd) {\n      settings.onAdd = this.get('_onAdd');\n    }\n    if (settings.onRemove) {\n      settings.onRemove = this.get('_onRemove');\n    }\n  },\n\n  didInitSemantic() {\n    this._super(...arguments);\n    // We want to handle this outside of the standard process\n    this.get('_settableAttrs').removeObject('selected');\n    // We need to ensure the internal value is set to '',\n    // otherwise when we get the value later it is undefined\n    // and semantic returns the module instead of the actual value\n    this.execute('clear');\n    this._inspectSelected();\n  },\n\n  didUpdateAttrs() {\n    this._super(...arguments);\n    this._inspectSelected();\n  },\n\n  actions: {\n    mapping(object) {\n      let guid = Ember.guidFor(object);\n      if (!this._hasOwnProperty(this.get('objectMap'), guid)) {\n        this.get('objectMap')[guid] = object;\n      }\n      Ember.run.scheduleOnce('afterRender', this, this._inspectSelected);\n      return guid;\n    }\n  },\n\n  // Method proxies\n  _onChange(value, text, $element) {\n    // Semantic calls the events on any 'set {action}'\n    // Because of that we want to ignore calls when we are\n    // Specifically setting the value\n    if (this.get('_isSettingSelect')) {\n      return;\n    }\n    let returnValue;\n    if (this.execute('is multiple')) {\n      let values = this.execute('get values');\n      returnValue = [];\n      for (let i = 0; i < Ember.get(values, 'length'); i++) {\n        let item = this._atIndex(values, i);\n        returnValue.push(this._getObjectOrValue(item));\n      }\n    } else {\n      returnValue = this._getObjectOrValue(value);\n    }\n\n    return this.attrs.onChange(returnValue, text, $element, this);\n  },\n  _onAdd: _proxyCallback('onAdd'),\n  _onRemove: _proxyCallback('onRemove'),\n\n  // Private methods\n  _atIndex(collection, index) {\n    if (typeof collection.objectAt === 'function') {\n      return collection.objectAt(index);\n    }\n    return collection[index];\n  },\n\n  _getObjectOrValue(value) {\n    if (this._hasOwnProperty(this.get('objectMap'), value)) {\n      return this.get('objectMap')[value];\n    }\n    if (Ember.isEmpty(value)) {\n      return null;\n    }\n    return value;\n  },\n\n  _inspectSelected() {\n    let selected = this.get('selected');\n    return this.resolvePromise(selected, this._checkSelected);\n  },\n\n  _checkSelected(selectedValue) {\n    let isMultiple = this.execute('is multiple');\n    let moduleSelected = this._getCurrentSelected(isMultiple);\n\n    if (!this._areSelectedEqual(selectedValue, moduleSelected, isMultiple)) {\n      this.set('_isSettingSelect', true);\n      this._setCurrentSelected(selectedValue, moduleSelected, isMultiple);\n      this.set('_isSettingSelect', false);\n    }\n  },\n\n  _getCurrentSelected(isMultiple) {\n    if (isMultiple) {\n      let keys = this.execute('get values');\n      let returnValues = [];\n      for (let i = 0; i < keys.length; i++) {\n        let key = this._atIndex(keys, i);\n        returnValues.push(this._getObjectOrValue(key));\n      }\n      return returnValues;\n    }\n\n    let key = this.execute('get value');\n    return this._getObjectOrValue(key);\n  },\n\n  _setCurrentSelected(selectedValue, moduleSelected, isMultiple) {\n    if (Ember.isBlank(selectedValue)) {\n      if (!Ember.isBlank(moduleSelected)) {\n        this.execute('clear');\n      }\n      return;\n    }\n\n    if (Ember.isArray(selectedValue)) {\n      let keys = [];\n      if (!isMultiple) {\n        Ember.Logger.error(\"Selected is an array of values, but the dropdown doesn't have the class 'multiple'\");\n        return;\n      }\n\n      for (let i = 0; i < Ember.get(selectedValue, 'length'); i++) {\n        let item = this._atIndex(selectedValue, i);\n        keys.push(this._getObjectKeyByValue(item));\n      }\n\n      return this.execute('set exactly', keys);\n    }\n\n    let key = this._getObjectKeyByValue(selectedValue);\n    return this.execute('set selected', key);\n  },\n\n  _areSelectedEqual(selectedValue, moduleValue, isMultiple) {\n    if (isMultiple) {\n      // If selectedValue passed in is an array, we are assuming that its the collection getting updated and that\n      // all module values must equal the attrValues\n\n      // If both are in a blank state of some kind, they are equal.\n      // i.e. selected could be null and moduleValue could be an empty array\n      if (Ember.isBlank(selectedValue) && Ember.isBlank(moduleValue)) {\n        return true;\n      }\n\n      if (Ember.isArray(selectedValue)) {\n        if (Ember.get(selectedValue, 'length') !== Ember.get(moduleValue, 'length')) {\n          return false;\n        }\n\n        // Loop through the collections and see if they are equal\n        for (let i = 0; i < Ember.get(selectedValue, 'length'); i++) {\n          let value = this._atIndex(selectedValue, i);\n          let equal = false;\n          for (let j = 0; j < Ember.get(moduleValue, 'length'); j++) {\n            let module = this._atIndex(moduleValue, j);\n            if (this.areAttrValuesEqual('selected', value, module)) {\n              equal = true;\n              break;\n            }\n          }\n          if (!equal) {\n            return false;\n          }\n        }\n        // If we didn't return, the arrays are equal\n        return true;\n      }\n      // otherwise, just try to see one of the values in the module equals the attr value\n      // The use case is the selected value is a single value to start, then the module value is an array\n      else if (Ember.isArray(moduleValue)) {\n        for (let i = 0; i < Ember.get(moduleValue, 'length'); i++) {\n          let item = this._atIndex(moduleValue, i);\n          if (this.areAttrValuesEqual('selected', selectedValue, item)) {\n            return true; // We found a match, just looking for one\n          }\n        }\n        return false;\n      }\n    }\n    return this.areAttrValuesEqual('selected', selectedValue, moduleValue);\n  },\n\n  _getObjectKeyByValue(value) {\n    // Since semantic is always binding to strings, we must return a string\n    // Either through the object mapping or directly stringed value\n    let objectMap = this.get('objectMap');\n    for (let key in objectMap) {\n      if (objectMap[key] === value) {\n        return key;\n      }\n    }\n    if (value == null) {\n      return '';\n    }\n    return value.toString();\n  }\n\n});","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/addon/components/ui-embed.js":"import Ember from 'ember';\nimport Base from '../mixins/base';\n\nexport default Ember.Component.extend(Base, {\n  module: 'embed',\n  classNames: ['ui', 'embed'],\n  attributeBindings: ['data-icon', 'data-id', 'data-placeholder', 'data-source', 'data-url'],\n  ignorableAttrs: ['data-icon', 'data-id', 'data-placeholder', 'data-source', 'data-url']\n});\n","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/addon/components/ui-modal.js":"import Ember from 'ember';\nimport Base from '../mixins/base';\n\nexport default Ember.Component.extend(Base, {\n  module: 'modal',\n  classNames: ['ui', 'modal'],\n\n  willInitSemantic(settings) {\n    this._super(...arguments);\n    if (settings.detachable == null) {\n      settings.detachable = false;\n    }\n    if (settings.observeChanges == null) {\n      settings.observeChanges = true;\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/addon/components/ui-nag.js":"import Ember from 'ember';\nimport Base from '../mixins/base';\n\nexport default Ember.Component.extend(Base, {\n  module: 'nag',\n  classNames: ['ui', 'nag']\n});\n","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/addon/components/ui-popup.js":"import Ember from 'ember';\nimport Base from '../mixins/base';\n\nexport default Ember.Component.extend(Base, {\n  module: 'popup',\n\n  didInitSemantic() {\n    this._super(...arguments);\n    let possibleAttrs = ['content', 'title', 'html'];\n    for (let i = 0; i < possibleAttrs.length; i++) {\n      let possibleAttr = possibleAttrs[i];\n      if (this._hasOwnProperty(this.attrs, possibleAttr) || this.get(possibleAttr) != null) {\n        this.get('_settableAttrs').addObject(possibleAttr);\n      }\n    }\n    this.get('_settableAttrs').removeObject('position');\n  },\n\n  setSemanticAttr(attrName, attrValue) {\n    if (attrName === 'content' || attrName === 'title' || attrName === 'html') {\n      let value = this._unwrapHTMLSafe(attrValue);\n      let response = this.execute('setting', attrName, value);\n      if (this.execute('is visible')) {\n        let html;\n        if (attrName === 'html') {\n          html = value;\n        } else {\n          let text;\n          if (attrName === 'content')  {\n            text = {\n              title: this.get('title'),\n              content: value\n            };\n          } else {\n            text = {\n              title: value,\n              content: this.get('content')\n            };\n          }\n          let moduleGlobal = this.getSemanticModuleGlobal();\n          html = moduleGlobal.settings.templates.popup(text);\n        }\n        this.execute('change content', html);\n      }\n      return response;\n    }\n    return this._super(...arguments);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/addon/components/ui-progress.js":"import Ember from 'ember';\nimport Base from '../mixins/base';\n\nexport default Ember.Component.extend(Base, {\n  module: 'progress',\n  classNames: ['ui', 'progress'],\n  ignorableAttrs: ['progress']\n});","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/addon/components/ui-radio.js":"import Ember from 'ember';\nimport Checkbox from '../mixins/checkbox';\nimport isPromise from 'ember-promise-tools/utils/is-promise';\nimport isFulfilled from 'ember-promise-tools/utils/is-fulfilled';\nimport getPromiseContent from 'ember-promise-tools/utils/get-promise-content';\nimport PromiseResolver from 'ember-promise-tools/mixins/promise-resolver';\n\nexport default Ember.Component.extend(Checkbox, PromiseResolver, {\n  type: 'radio',\n  classNames: ['radio'],\n  ignorableAttrs: ['checked', 'label', 'disabled', 'value', 'current'],\n\n  init() {\n    this._super(...arguments);\n\n    if (Ember.isBlank(this.get('name'))) {\n      this.set('name', 'default');\n      Ember.Logger.warn(\"The required component parameter of 'name' was not passed into the ui-radio component\");\n    }\n  },\n\n  // Internal wrapper for onchange, to pass through checked\n  _onChange() {\n    let value = this.get('value');\n    return this.attrs.onChange(value, this);\n  },\n\n  didInitSemantic() {\n    this._super(...arguments);\n    this._inspectValueAndCurrent();\n  },\n\n  didUpdateAttrs() {\n    this._super(...arguments);\n    this._inspectValueAndCurrent();\n  },\n\n  _inspectValueAndCurrent() {\n    let value = this.get('value');\n    let current = this.get('current');\n    // If either are a promise, we need to make sure both are resolved\n    // Or wait for them to resolve\n    if (isPromise(value) || isPromise(current)) {\n\n      // This code is probably overkill, but i wanted to ensure that\n      // if the promises are resolved we render as soon as possible instead of waiting\n      // for the hash to resolve each time\n      if (isPromise(value)) {\n        if (!isFulfilled(value)) {\n          return this.resolvePromise(Ember.RSVP.hash({ value, current }), this._checkValueAndCurrent);\n        } else {\n          value = getPromiseContent(value);\n        }\n      }\n\n      if (isPromise(current)) {\n        if (!isFulfilled(current)) {\n          return this.resolvePromise(Ember.RSVP.hash({ value, current }), this._checkValueAndCurrent);\n        } else {\n          current = getPromiseContent(current);\n        }\n      }\n    }\n    // If we didn't return, the promises are either fulfilled or not promises\n    this._checkValueAndCurrent({ value, current });\n  },\n\n  _checkValueAndCurrent(hash) {\n    let isChecked = this.execute('is checked');\n    if (this.areAttrValuesEqual('checked', hash.value, hash.current)) {\n      // Value and current match, but radio isn't checked, return false\n      if (!isChecked) {\n        return this.execute('set checked');\n      }\n    } else {\n      // Value and current don't match and radio is checked, return false\n      if (isChecked) {\n        return this.execute('set unchecked');\n      }\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/addon/components/ui-rating.js":"import Ember from 'ember';\nimport Base from '../mixins/base';\n\nexport default Ember.Component.extend(Base, {\n  module: 'rating',\n  classNames: ['ui', 'rating'],\n  ignorableAttrs: ['rating'],\n\n  willInitSemantic(settings) {\n    this._super(...arguments);\n    if (settings.initialRating == null && this.get('rating')) {\n      settings.initialRating = this.get('rating');\n    }\n  }\n});","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/addon/components/ui-search.js":"import Ember from 'ember';\nimport Base from '../mixins/base';\n\nexport default Ember.Component.extend(Base, {\n  module: 'search',\n  classNames: ['ui', 'search']\n});\n","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/addon/components/ui-shape.js":"import Ember from 'ember';\nimport Base from '../mixins/base';\n\nexport default Ember.Component.extend(Base, {\n  module: 'shape',\n  classNames: ['ui', 'shape']\n});\n","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/addon/components/ui-sidebar.js":"import Ember from 'ember';\nimport Base from '../mixins/base';\n\nexport default Ember.Component.extend(Base, {\n  module: 'sidebar',\n  classNames: ['ui', 'sidebar']\n});\n","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/addon/components/ui-sticky.js":"import Ember from 'ember';\nimport Base from '../mixins/base';\n\nexport default Ember.Component.extend(Base, {\n  module: 'sticky',\n  classNames: ['ui', 'sticky']\n});\n","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/addon/helpers/map-value.js":"import Ember from 'ember';\nimport PromiseResolver from 'ember-promise-tools/mixins/promise-resolver';\n\nexport default Ember.Helper.extend(PromiseResolver, {\n  compute([action, maybePromise]) {\n    return this.resolvePromise(maybePromise, function(value) {\n      return action(value);\n    }, function() {\n      this.recompute();\n      return null;\n    });\n  }\n});","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/addon/mixins/base.js":"import Ember from 'ember';\nimport Semantic from '../semantic';\nimport isHTMLSafe from 'ember-string-ishtmlsafe-polyfill';\n\nconst EMBER_ATTRS = ['class', 'classNameBindings', 'classNames', 'tagName'];\nconst HTML_ATTRS = ['id', 'name', 'readonly', 'autofocus', 'tabindex', 'title'];\nconst CUSTOM_ATTRS = ['onElement'];\n\nSemantic.BaseMixin = Ember.Mixin.create({\n  /// Internal Variables\n  _initialized: false,\n  _bindableAttrs: null,\n  _settableAttrs: null,\n  _ignorableAttrs: null,\n\n  attributeBindings: [\n    'autofocus',\n    'tabindex',\n    'title'\n  ],\n\n  /// EMBER HOOKS\n  init() {\n    this._super(...arguments);\n\n    if (Ember.isBlank(this.getSemanticModuleName())) {\n      return Ember.Logger.error('A module was not declared on semantic extended type');\n    }\n    this.set('_initialized', false);\n    this.set('_bindableAttrs', Ember.A());\n    this.set('_settableAttrs', Ember.A());\n    this.set('_ignorableAttrs', this.getSemanticIgnorableAttrs());\n  },\n\n  didInsertElement() {\n    this._super(...arguments);\n    this.initSemanticModule();\n\n    // Get the modules settable and gettable properties.\n    let settableProperties = Ember.A(Object.keys(this.execute('internal', 'set')));\n    let gettableProperties = Ember.A(Object.keys(this.execute('internal', 'get')));\n\n    for (let key in this.get('attrs')) {\n      // If it has a settable and gettable attribute, then its bindable\n      if (settableProperties.includes(key) && gettableProperties.includes(key)) {\n        this.get('_bindableAttrs').addObject(key);\n      } else if (settableProperties.includes(key)) {\n        // otherwise, its settable only\n        this.get('_settableAttrs').addObject(key);\n      }\n    }\n    this.didInitSemantic();\n    this.set('_initialized', true);\n  },\n\n  willDestroyElement() {\n    this._super(...arguments);\n    this.execute('destroy');\n  },\n\n  didUpdateAttrs() {\n    this._super(...arguments);\n    for (let i = 0; i < this.get('_bindableAttrs').length; i++) {\n      let bindableAttr = this.get('_bindableAttrs')[i];\n      let attrValue = this._getAttrValue(bindableAttr);\n      let moduleValue = this.getSemanticAttr(bindableAttr);\n      if (!this.areAttrValuesEqual(bindableAttr, attrValue, moduleValue)) {\n        this.setSemanticAttr(bindableAttr, attrValue);\n      }\n    }\n    for (let i = 0; i < this.get('_settableAttrs').length; i++) {\n      let settableAttr = this.get('_settableAttrs')[i];\n      let attrValue = this._getAttrValue(settableAttr);\n      this.setSemanticAttr(settableAttr, attrValue);\n    }\n  },\n\n  /// Semantic Hooks\n  getSemanticIgnorableAttrs() {\n    let ignorableAttrs = [];\n    if (Ember.isPresent(this.get('ignorableAttrs'))) {\n      ignorableAttrs = ignorableAttrs.concat(this.get('ignorableAttrs'));\n    }\n    ignorableAttrs = ignorableAttrs.concat(EMBER_ATTRS);\n    ignorableAttrs = ignorableAttrs.concat(HTML_ATTRS);\n    ignorableAttrs = ignorableAttrs.concat(CUSTOM_ATTRS);\n    return Ember.A(ignorableAttrs);\n  },\n\n  getSemanticScope() {\n    if (Ember.isPresent(this.get('onElement'))) {\n      return this.$(this.get('onElement'));\n    }\n    return this.$();\n  },\n\n  getSemanticModuleName() {\n    return this.get('module');\n  },\n\n  getSemanticModule() {\n    let selector = this.getSemanticScope();\n    if (selector != null) {\n      let module = selector[this.getSemanticModuleName()];\n      if (typeof module === 'function') {\n        return module;\n      }\n    }\n    return null;\n  },\n\n  getSemanticModuleGlobal() {\n    let moduleName = this.getSemanticModuleName();\n    return window.$.fn[moduleName];\n  },\n\n  willInitSemantic(settings) { // jshint ignore:line\n    // Use this method to modify the settings object on inherited components, before module initialization\n  },\n\n  initSemanticModule() {\n    let module = this.getSemanticModule();\n    if (module) {\n      module.call(this.getSemanticScope(), this._settings());\n    } else {\n      Ember.Logger.error(`The Semantic UI module ${this.getSemanticModuleName()} was not found and did not initialize`);\n    }\n  },\n\n  didInitSemantic() {\n    // Use this method after the module is initialized to do post initialized changes\n  },\n\n  getSemanticAttr(attrName) {\n    return this.execute(`get ${attrName}`);\n  },\n\n  setSemanticAttr(attrName, attrValue) {\n    return this.execute(`set ${attrName}`, this._unwrapHTMLSafe(attrValue));\n  },\n\n  areAttrValuesEqual(attrName, attrValue, moduleValue) {\n    return attrValue === moduleValue ||\n           this._stringCompareIfPossible(attrValue) === this._stringCompareIfPossible(moduleValue) ||\n           Ember.isEqual(attrValue, moduleValue);\n  },\n\n  // Semantic Helper Methods\n  execute() {\n    let module = this.getSemanticModule();\n    if (module) {\n      return module.apply(this.getSemanticScope(), arguments);\n    }\n    Ember.Logger.warn(\"The execute method was called, but the Semantic-UI module didn't exist.\");\n  },\n\n  actions: {\n    execute() {\n      return this.execute(...arguments);\n    }\n  },\n\n  // Private Methods\n  _getAttrValue(name) {\n    let value = this.get(`attrs.${name}`);\n\n    if (Ember.isBlank(value)) {\n      return value;\n    }\n\n    // if its a mutable object, get the actual value\n    if (typeof value === 'object') {\n      let objectKeys = Ember.A(Object.keys(value));\n      if (objectKeys.any((objectkey) => objectkey.indexOf('MUTABLE_CELL') >= 0)) {\n        value = Ember.get(value, 'value');\n      }\n    }\n\n    return value;\n  },\n\n  _settings() {\n    let moduleName = this.getSemanticModuleName();\n\n    let moduleGlobal = this.getSemanticModuleGlobal();\n    if (!moduleGlobal) {\n      Ember.Logger.error(`Unable to find jQuery Semantic UI module: ${moduleName}`);\n      return;\n    }\n\n    let custom = {\n      debug: Semantic.UI_DEBUG,\n      performance: Semantic.UI_PERFORMANCE,\n      verbose: Semantic.UI_VERBOSE\n    };\n\n    for (let key in this.get('attrs')) {\n      let value = this._getAttrValue(key);\n\n      if (!this._hasOwnProperty(moduleGlobal.settings, key)) {\n        if (!this.get('_ignorableAttrs').includes(key) && !this.get('_ignorableAttrs').includes(Ember.String.camelize(key))) {\n          // TODO: Add better ember keys here\n          // Ember.Logger.debug(`You passed in the property '${key}', but a setting doesn't exist on the Semantic UI module: ${moduleName}`);\n        }\n        continue;\n      }\n\n      if (value != null) {\n        custom[key] = value;\n      }\n    }\n\n    // Init, and allow any overrides\n    this.willInitSemantic(custom);\n\n    // Late bind any functions over to use the right scope\n    for (let key in custom) {\n      let value = custom[key];\n      if (typeof value === 'function') {\n        custom[key] = Ember.run.bind(this, this._updateFunctionWithParameters(key, value));\n      }\n      if (typeof value === 'object') {\n        if (isHTMLSafe(value)) {\n          custom[key] = this._unwrapHTMLSafe(value);\n        }\n      }\n    }\n\n    return custom;\n  },\n\n  _updateFunctionWithParameters(key, fn) {\n    return function() {\n      var args = [].splice.call(arguments, 0);\n      // always add component instance as the last parameter incase they need access to it\n      args.push(this);\n\n      if (this.get('_initialized')) {\n        return fn.apply(this, args);\n      }\n    };\n  },\n\n  _stringCompareIfPossible(value) {\n    // If its undefined or null, compare on null\n    if (value == null) {\n      return null;\n    }\n    // We should only compare string values on primitive types\n    switch (typeof value) {\n      case \"string\":\n        return value;\n      case \"boolean\":\n      case \"number\":\n        return value.toString();\n      case \"object\":\n        return this._unwrapHTMLSafe(value);\n      default:\n        // Don't convert to string, otherwise it would be \"[Object]\"\n        return value;\n    }\n  },\n\n  _setAttrBindable(attrName) {\n    if (this.get('_settableAttrs').includes(attrName)) {\n      this.get('_settableAttrs').removeObject(attrName);\n      this.get('_bindableAttrs').addObject(attrName);\n    }\n  },\n\n  _unwrapHTMLSafe(value) {\n    if (isHTMLSafe(value)) {\n      return value.toString();\n    }\n    return value;\n  },\n\n  _hasOwnProperty(object, property) {\n    if (object) {\n      if (object.hasOwnProperty && typeof object.hasOwnProperty === \"function\") {\n        return object.hasOwnProperty(property);\n      }\n      // Ember 2.9 returns an EmptyObject, which doesn't have hasOwnProperty\n      return Object.prototype.hasOwnProperty.call(object, property);\n    }\n\n    return false;\n  }\n});\n\nexport default Semantic.BaseMixin;\n","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/addon/mixins/checkbox.js":"import Ember from 'ember';\nimport Base from './base';\n\n/*\n * Checkbox Component Mixin\n */\nvar CheckboxMixin = Ember.Mixin.create(Base, {\n  module: 'checkbox',\n  classNames: ['ui', 'checkbox'],\n\n  willInitSemantic(settings) {\n    this._super(...arguments);\n    if (settings.onChange) {\n      // Checkbox and radio both have an implementation for this\n      settings.onChange = this.get('_onChange');\n    }\n    if (this._hasOwnProperty(this.attrs, 'readonly') || this.get('readonly') != null) {\n      this.$().toggleClass('read-only', this.get('readonly'));\n    }\n  },\n\n  didInitSemantic() {\n    this._super(...arguments);\n    // We need to fake that its bindable for checked and disabled\n    this._setAttrBindable('checked');\n    this._setAttrBindable('disabled');\n    this._setAttrBindable('enabled');\n    if (this.get('readonly') != null) {\n      this.get('_settableAttrs').addObject('readonly');\n    }\n    // Init initial value set properties correctly\n    if (this.get('checked') != null) {\n      this.setSemanticAttr('checked', this.get('checked'));\n    }\n    if (this.get('disabled') != null) {\n      this.setSemanticAttr('disabled', this.get('disabled'));\n    }\n    if (this.get('enabled') != null) {\n      this.setSemanticAttr('enabled', this.get('enabled'));\n    }\n  },\n\n  getSemanticAttr(attrName) {\n    if (attrName === 'checked') {\n      return this.execute('is checked');\n    }\n    if (attrName === 'disabled') {\n      return this.execute('is disabled');\n    }\n    if (attrName === 'enabled') {\n      return this.execute('is enabled');\n    }\n    return this._super(...arguments);\n  },\n\n  setSemanticAttr(attrName, attrValue) {\n    // Handle checked\n    if (attrName === 'checked') {\n      if (attrValue) {\n        return this.execute('set checked');\n      }\n      return this.execute('set unchecked');\n    }\n    // Handle disabled\n    if (attrName === 'disabled') {\n      if (attrValue) {\n        return this.execute('set disabled');\n      }\n      return this.execute('set enabled');\n    }\n    // Handle enabled\n    if (attrName === 'enabled') {\n      if (attrValue) {\n        return this.execute('set enabled');\n      }\n      return this.execute('set disabled');\n    }\n    // Handle readonly\n    if (attrName === 'readonly') {\n      // We need to add a class verses updating the property, since semantic is caching the value internall\n      return this.$().toggleClass('read-only', attrValue);\n    }\n    // Default\n    return this._super(...arguments);\n  }\n});\n\nexport default CheckboxMixin;\n","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/app/components/ui-accordion.js":"export { default } from 'semantic-ui-ember/components/ui-accordion';","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/app/components/ui-checkbox.js":"export { default } from 'semantic-ui-ember/components/ui-checkbox';","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/app/components/ui-dimmer.js":"export { default } from 'semantic-ui-ember/components/ui-dimmer';","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/app/components/ui-dropdown.js":"export { default } from 'semantic-ui-ember/components/ui-dropdown';","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/app/components/ui-embed.js":"export { default } from 'semantic-ui-ember/components/ui-embed';","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/app/components/ui-modal.js":"export { default } from 'semantic-ui-ember/components/ui-modal';","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/app/components/ui-nag.js":"export { default } from 'semantic-ui-ember/components/ui-nag';","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/app/components/ui-popup.js":"export { default } from 'semantic-ui-ember/components/ui-popup';","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/app/components/ui-progress.js":"export { default } from 'semantic-ui-ember/components/ui-progress';","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/app/components/ui-radio.js":"export { default } from 'semantic-ui-ember/components/ui-radio';","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/app/components/ui-rating.js":"export { default } from 'semantic-ui-ember/components/ui-rating';","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/app/components/ui-search.js":"export { default } from 'semantic-ui-ember/components/ui-search';","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/app/components/ui-shape.js":"export { default } from 'semantic-ui-ember/components/ui-shape';","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/app/components/ui-sidebar.js":"export { default } from 'semantic-ui-ember/components/ui-sidebar';","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/app/components/ui-sticky.js":"export { default } from 'semantic-ui-ember/components/ui-sticky';","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/app/helpers/map-value.js":"export { default, mapValue } from 'semantic-ui-ember/helpers/map-value';\n","/home/travis/build/npmtest/node-npmtest-semantic-ui-ember/node_modules/semantic-ui-ember/app/mixins/base.js":"export { default } from 'semantic-ui-ember/mixins/base';\n"}